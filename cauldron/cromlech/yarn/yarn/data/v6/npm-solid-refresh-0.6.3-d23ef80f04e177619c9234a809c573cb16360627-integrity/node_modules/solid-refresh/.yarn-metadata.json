{
  "manifest": {
    "name": "solid-refresh",
    "type": "module",
    "description": "Universal HMR for SolidJS",
    "author": {
      "name": "Ryan Carniato"
    },
    "license": "MIT",
    "version": "0.6.3",
    "homepage": "https://github.com/solidjs/solid-refresh#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/solidjs/solid-refresh"
    },
    "main": "dist/solid-refresh.cjs",
    "module": "dist/solid-refresh.mjs",
    "exports": {
      ".": {
        "import": "./dist/solid-refresh.mjs",
        "require": "./dist/solid-refresh.cjs",
        "default": "./dist/solid-refresh.cjs",
        "types": "./dist/src/runtime/index.d.ts"
      },
      "./babel": {
        "import": "./dist/babel.mjs",
        "require": "./dist/babel.cjs",
        "default": "./dist/babel.cjs",
        "types": "./dist/src/babel/index.d.ts"
      },
      "./dist/*": "./dist/*"
    },
    "typesVersions": {
      "*": {
        "babel": [
          "./dist/src/babel/index.d.ts"
        ]
      }
    },
    "files": [
      "dist"
    ],
    "publishConfig": {
      "access": "public"
    },
    "contributors": [
      {
        "name": "Alexis Munsayac"
      }
    ],
    "sideEffects": false,
    "devDependencies": {
      "@babel/core": "^7.23.6",
      "@biomejs/biome": "^1.5.1",
      "@rollup/plugin-node-resolve": "^15.2.3",
      "@rollup/plugin-typescript": "^11.1.5",
      "@types/babel__core": "^7.20.5",
      "@types/babel__generator": "^7.6.8",
      "@types/babel__helper-module-imports": "^7.18.3",
      "@types/babel__traverse": "^7.20.4",
      "@types/node": "^20.10.5",
      "babel-preset-solid": "^1.8.9",
      "rollup": "^4.9.1",
      "solid-js": "^1.8.7",
      "tslib": "^2.6.2",
      "typescript": "^5.3.3",
      "vitest": "^1.1.0"
    },
    "peerDependencies": {
      "solid-js": "^1.3"
    },
    "dependencies": {
      "@babel/generator": "^7.23.6",
      "@babel/helper-module-imports": "^7.22.15",
      "@babel/types": "^7.23.6"
    },
    "scripts": {
      "build": "rollup -c",
      "test": "vitest",
      "test:CI": "vitest"
    },
    "_registry": "npm",
    "_loc": "/yarn-cache/v6/npm-solid-refresh-0.6.3-d23ef80f04e177619c9234a809c573cb16360627-integrity/node_modules/solid-refresh/package.json",
    "readmeFilename": "README.md",
    "readme": "<p>\n  <img width=\"100%\" src=\"https://assets.solidjs.com/banner?project=Refresh&type=core\" alt=\"Solid Refresh\">\n</p>\n\n# Solid Refresh\n\n```bash\nnpm i -D solid-refresh\n```\n\n```bash\nyarn add -D solid-refresh\n```\n\n```bash\npnpm add -D solid-refresh\n```\n\nThis project aims to provide HMR for Solid for various bundlers. It comes with a babel plugin and a runtime. Over time I hope to add different bundlers. Today it supports:\n\n* Vite (with option `bundler: \"vite\"`)\n* Snowpack (with option `bundler: \"esm\"`)\n* Webpack (for strict ESM, use option `bundler: \"webpack5\"`)\n* Nollup\n\n## Setup\n\n### Vite\n\n`solid-refresh` is already built into [`vite-plugin-solid`](https://github.com/solidjs/vite-plugin-solid).\n\n### Webpack & Rspack\n\nYou can read the following guides first, respectively:\n\n* [Webpack](https://webpack.js.org/guides/hot-module-replacement#enabling-hmr)\n* [Rspack](https://www.rspack.dev/guide/dev-server.html#hmr)\n* [Rspack SolidJS guide](https://www.rspack.dev/guide/solid.html)\n\n> **Note**\n> Rspack has HMR already enabled by default. The guide only tells you how to disable it or run the dev server on a proxy server.\n\nRequires the use of [`babel-loader`](https://www.npmjs.com/package/babel-loader). Add the following to `.babelrc`:\n\n```json\n{\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"solid-refresh/babel\"]\n    }\n  }\n}\n```\n\nIf you're using strict ESM a.k.a. `import.meta.webpackHot`:\n\n```json\n{\n  \"env\": {\n    \"development\": {\n      \"plugins\": [[\"solid-refresh/babel\", {\n        \"bundler\": \"webpack5\" // or \"rspack-esm\"\n      }]]\n    }\n  }\n}\n```\n\nIn your webpack config, be sure to have the following options:\n\n```js\ndevServer: {\n  liveReload: false,\n  hot: true,\n}\n```\n\n### Nollup\n\nRequires the use of [`@rollup/plugin-babel`](https://www.npmjs.com/package/@rollup/plugin-babel). Add the following to `.babelrc`:\n\n```json\n{\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"solid-refresh/babel\"]\n    }\n  }\n}\n```\n\n### Snowpack\n\nRequires the use of [`@snowpack/plugin-babel`](https://www.npmjs.com/package/@snowpack/plugin-babel).  Add the following to `.babelrc`:\n\n```json\n{\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"solid-refresh/babel\", { \"bundler\": \"esm\" }]\n    }\n  }\n}\n```\n\n### Other dev servers\n\n* [`Parcel`](https://parceljs.org/)\n  * ParcelJS doesn't support [conditional exports](https://nodejs.org/api/packages.html#conditional-exports) yet, which makes ParcelJS load the production build of SolidJS instead of its development build. Solid Refresh requires the SolidJS development build to work.\n* [`wmr`](https://wmr.dev/)\n  * SolidJS is yet to be supported or isn't clear yet. It will use the same config as Snowpack.\n* [`rollup-plugin-hot`](https://github.com/rixo/rollup-plugin-hot)\n  * The library uses almost an ESM HMR-like API however it behaves the same way as Parcel. Supporting this library is still unclear.\n* [`@web/dev-server`](https://modern-web.dev/docs/dev-server)\n  * The library supports HMR through their [HMR Plugin](https://modern-web.dev/docs/dev-server/plugins/hmr). The HMR interface is basically the same as Snowpack's.\n\n### Development Environment\n\nIn any case, your build system needs to support conditional exports and have the `development` condition set.\n\n> **Warning**\n> In some standard HMR implementations, this may cause your app to reload the full page if the development environment isn't properly set!\n\n## How it works\n\nThe babel plugin will transform components with matching Pascal-cased names (indicating that they are components). This detection is supported in variable declarations, function declarations and named exports:\n\n```jsx\n// This works\nfunction Foo() {\n  return <h1>Hello Foo</h1>;\n}\n\n// This also works\nconst Bar = () => <h1>Hello Bar</h1>;\n```\n\nThe components are wrapped and memoized. When the module receives an update, it replaces the old components from the old module with the new components.\n\n## Automatic Render Cleanup\n\nThe plugin automatically handles cleanups for unhandled `render` and `hydrate` calls from `solid-js/web`.\n\nYou can disable this feature entirely through the option `\"fixRender\": false`.\n\n## Pragma\n\nOn a per file basis, use comments at top of file to opt out(change moves up to parent):\n\n```js\n/* @refresh skip */\n```\n\nOr force reload:\n\n```js\n/* @refresh reload */\n```\n\n### `@refresh granular`\n\nBy default, components from the old module are replaced with the new ones from the replacement module, which might cause components that hasn't really changed to unmount abruptly.\n\nAdding `@refresh granular` comment pragma in the file allows components to opt-in to granular replacement: If the component has changed *code-wise*, it will be replaced, otherwise, it will be retained, which allows unchanged ancestor components to preserve lifecycles.\n\n## Limitations\n\n* Preserving state: The default mode does not allow preserving state through module replacement. `@refresh granular` allows this partially.\n* No HOC support.\n\n## Custom `render`/`createContext`\n\nYou can define custom `render`/`createContext` calls by using the `imports` option\n\n```js\n{\n  \"imports\": [\n    {\n      // Only either \"render\" or \"createContext\"\n      \"type\": \"render\",\n      // Import identifier\n      \"name\": \"render\",\n      // Kind of import (named or default)\n      \"kind\": \"named\",\n      // Module source\n      \"source\": \"my-solid-library\"\n    }\n  ],\n}\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020-2021 Ryan Carniato\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/solid-refresh/-/solid-refresh-0.6.3.tgz#d23ef80f04e177619c9234a809c573cb16360627",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/solid-refresh/-/solid-refresh-0.6.3.tgz",
    "hash": "d23ef80f04e177619c9234a809c573cb16360627",
    "integrity": "sha512-F3aPsX6hVw9ttm5LYlth8Q15x6MlI/J3Dn+o3EQyRTtTxidepSTwAYdozt01/YA+7ObcciagGEyXIopGZzQtbA==",
    "registry": "npm",
    "packageName": "solid-refresh",
    "cacheIntegrity": "sha512-F3aPsX6hVw9ttm5LYlth8Q15x6MlI/J3Dn+o3EQyRTtTxidepSTwAYdozt01/YA+7ObcciagGEyXIopGZzQtbA== sha1-0j74DwThd2GckjSoCcVzyxY2Bic="
  },
  "registry": "npm",
  "hash": "d23ef80f04e177619c9234a809c573cb16360627"
}