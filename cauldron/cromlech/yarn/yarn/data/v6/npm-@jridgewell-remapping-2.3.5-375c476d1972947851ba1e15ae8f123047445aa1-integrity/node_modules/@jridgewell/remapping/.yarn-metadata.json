{
  "manifest": {
    "name": "@jridgewell/remapping",
    "version": "2.3.5",
    "description": "Remap sequential sourcemaps through transformations to point at the original source code",
    "keywords": [
      "source",
      "map",
      "remap"
    ],
    "main": "dist/remapping.umd.js",
    "module": "dist/remapping.mjs",
    "types": "types/remapping.d.cts",
    "files": [
      "dist",
      "src",
      "types"
    ],
    "exports": {
      ".": [
        {
          "import": {
            "types": "./types/remapping.d.mts",
            "default": "./dist/remapping.mjs"
          },
          "default": {
            "types": "./types/remapping.d.cts",
            "default": "./dist/remapping.umd.js"
          }
        },
        "./dist/remapping.umd.js"
      ],
      "./package.json": "./package.json"
    },
    "scripts": {
      "benchmark": "run-s build:code benchmark:*",
      "benchmark:install": "cd benchmark && npm install",
      "benchmark:only": "node --expose-gc benchmark/index.js",
      "build": "run-s -n build:code build:types",
      "build:code": "node ../../esbuild.mjs remapping.ts",
      "build:types": "run-s build:types:force build:types:emit build:types:mts",
      "build:types:force": "rimraf tsconfig.build.tsbuildinfo",
      "build:types:emit": "tsc --project tsconfig.build.json",
      "build:types:mts": "node ../../mts-types.mjs",
      "clean": "run-s -n clean:code clean:types",
      "clean:code": "tsc --build --clean tsconfig.build.json",
      "clean:types": "rimraf dist types",
      "test": "run-s -n test:types test:only test:format",
      "test:format": "prettier --check '{src,test}/**/*.ts'",
      "test:only": "mocha",
      "test:types": "eslint '{src,test}/**/*.ts'",
      "lint": "run-s -n lint:types lint:format",
      "lint:format": "npm run test:format -- --write",
      "lint:types": "npm run test:types -- --fix",
      "prepublishOnly": "npm run-s -n build test"
    },
    "homepage": "https://github.com/jridgewell/sourcemaps/tree/main/packages/remapping",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jridgewell/sourcemaps.git",
      "directory": "packages/remapping"
    },
    "author": {
      "name": "Justin Ridgewell",
      "email": "justin@ridgewell.name"
    },
    "license": "MIT",
    "dependencies": {
      "@jridgewell/gen-mapping": "^0.3.5",
      "@jridgewell/trace-mapping": "^0.3.24"
    },
    "devDependencies": {
      "source-map": "0.6.1"
    },
    "_registry": "npm",
    "_loc": "/yarn-cache/v6/npm-@jridgewell-remapping-2.3.5-375c476d1972947851ba1e15ae8f123047445aa1-integrity/node_modules/@jridgewell/remapping/package.json",
    "readmeFilename": "README.md",
    "readme": "# @jridgewell/remapping\n\n> Remap sequential sourcemaps through transformations to point at the original source code\n\nRemapping allows you to take the sourcemaps generated through transforming your code and \"remap\"\nthem to the original source locations. Think \"my minified code, transformed with babel and bundled\nwith webpack\", all pointing to the correct location in your original source code.\n\nWith remapping, none of your source code transformations need to be aware of the input's sourcemap,\nthey only need to generate an output sourcemap. This greatly simplifies building custom\ntransformations (think a find-and-replace).\n\n## Installation\n\n```sh\nnpm install @jridgewell/remapping\n```\n\n## Usage\n\n```typescript\nfunction remapping(\n  map: SourceMap | SourceMap[],\n  loader: (file: string, ctx: LoaderContext) => (SourceMap | null | undefined),\n  options?: { excludeContent: boolean, decodedMappings: boolean }\n): SourceMap;\n\n// LoaderContext gives the loader the importing sourcemap, tree depth, the ability to override the\n// \"source\" location (where child sources are resolved relative to, or the location of original\n// source), and the ability to override the \"content\" of an original source for inclusion in the\n// output sourcemap.\ntype LoaderContext = {\n readonly importer: string;\n readonly depth: number;\n source: string;\n content: string | null | undefined;\n}\n```\n\n`remapping` takes the final output sourcemap, and a `loader` function. For every source file pointer\nin the sourcemap, the `loader` will be called with the resolved path. If the path itself represents\na transformed file (it has a sourcmap associated with it), then the `loader` should return that\nsourcemap. If not, the path will be treated as an original, untransformed source code.\n\n```js\n// Babel transformed \"helloworld.js\" into \"transformed.js\"\nconst transformedMap = JSON.stringify({\n  file: 'transformed.js',\n  // 1st column of 2nd line of output file translates into the 1st source\n  // file, line 3, column 2\n  mappings: ';CAEE',\n  sources: ['helloworld.js'],\n  version: 3,\n});\n\n// Uglify minified \"transformed.js\" into \"transformed.min.js\"\nconst minifiedTransformedMap = JSON.stringify({\n  file: 'transformed.min.js',\n  // 0th column of 1st line of output file translates into the 1st source\n  // file, line 2, column 1.\n  mappings: 'AACC',\n  names: [],\n  sources: ['transformed.js'],\n  version: 3,\n});\n\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    // The \"transformed.js\" file is an transformed file.\n    if (file === 'transformed.js') {\n      // The root importer is empty.\n      console.assert(ctx.importer === '');\n      // The depth in the sourcemap tree we're currently loading.\n      // The root `minifiedTransformedMap` is depth 0, and its source children are depth 1, etc.\n      console.assert(ctx.depth === 1);\n\n      return transformedMap;\n    }\n\n    // Loader will be called to load transformedMap's source file pointers as well.\n    console.assert(file === 'helloworld.js');\n    // `transformed.js`'s sourcemap points into `helloworld.js`.\n    console.assert(ctx.importer === 'transformed.js');\n    // This is a source child of `transformed`, which is a source child of `minifiedTransformedMap`.\n    console.assert(ctx.depth === 2);\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   file: 'transpiled.min.js',\n//   mappings: 'AAEE',\n//   sources: ['helloworld.js'],\n//   version: 3,\n// };\n```\n\nIn this example, `loader` will be called twice:\n\n1. `\"transformed.js\"`, the first source file pointer in the `minifiedTransformedMap`. We return the\n   associated sourcemap for it (its a transformed file, after all) so that sourcemap locations can\n   be traced through it into the source files it represents.\n2. `\"helloworld.js\"`, our original, unmodified source code. This file does not have a sourcemap, so\n   we return `null`.\n\nThe `remapped` sourcemap now points from `transformed.min.js` into locations in `helloworld.js`. If\nyou were to read the `mappings`, it says \"0th column of the first line output line points to the 1st\ncolumn of the 2nd line of the file `helloworld.js`\".\n\n### Multiple transformations of a file\n\nAs a convenience, if you have multiple single-source transformations of a file, you may pass an\narray of sourcemap files in the order of most-recent transformation sourcemap first. Note that this\nchanges the `importer` and `depth` of each call to our loader. So our above example could have been\nwritten as:\n\n```js\nconst remapped = remapping(\n  [minifiedTransformedMap, transformedMap],\n  () => null\n);\n\nconsole.log(remapped);\n// {\n//   file: 'transpiled.min.js',\n//   mappings: 'AAEE',\n//   sources: ['helloworld.js'],\n//   version: 3,\n// };\n```\n\n### Advanced control of the loading graph\n\n#### `source`\n\nThe `source` property can overridden to any value to change the location of the current load. Eg,\nfor an original source file, it allows us to change the location to the original source regardless\nof what the sourcemap source entry says. And for transformed files, it allows us to change the\nrelative resolving location for child sources of the loaded sourcemap.\n\n```js\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    if (file === 'transformed.js') {\n      // We pretend the transformed.js file actually exists in the 'src/' directory. When the nested\n      // source files are loaded, they will now be relative to `src/`.\n      ctx.source = 'src/transformed.js';\n      return transformedMap;\n    }\n\n    console.assert(file === 'src/helloworld.js');\n    // We could futher change the source of this original file, eg, to be inside a nested directory\n    // itself. This will be reflected in the remapped sourcemap.\n    ctx.source = 'src/nested/transformed.js';\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   …,\n//   sources: ['src/nested/helloworld.js'],\n// };\n```\n\n\n#### `content`\n\nThe `content` property can be overridden when we encounter an original source file. Eg, this allows\nyou to manually provide the source content of the original file regardless of whether the\n`sourcesContent` field is present in the parent sourcemap. It can also be set to `null` to remove\nthe source content.\n\n```js\nconst remapped = remapping(\n  minifiedTransformedMap,\n  (file, ctx) => {\n\n    if (file === 'transformed.js') {\n      // transformedMap does not include a `sourcesContent` field, so usually the remapped sourcemap\n      // would not include any `sourcesContent` values.\n      return transformedMap;\n    }\n\n    console.assert(file === 'helloworld.js');\n    // We can read the file to provide the source content.\n    ctx.content = fs.readFileSync(file, 'utf8');\n    return null;\n  }\n);\n\nconsole.log(remapped);\n// {\n//   …,\n//   sourcesContent: [\n//     'console.log(\"Hello world!\")',\n//   ],\n// };\n```\n\n### Options\n\n#### excludeContent\n\nBy default, `excludeContent` is `false`. Passing `{ excludeContent: true }` will exclude the\n`sourcesContent` field from the returned sourcemap. This is mainly useful when you want to reduce\nthe size out the sourcemap.\n\n#### decodedMappings\n\nBy default, `decodedMappings` is `false`. Passing `{ decodedMappings: true }` will leave the\n`mappings` field in a [decoded state](https://github.com/rich-harris/sourcemap-codec) instead of\nencoding into a VLQ string.\n",
    "licenseText": "Copyright 2024 Justin Ridgewell <justin@ridgewell.name>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@jridgewell/remapping/-/remapping-2.3.5.tgz#375c476d1972947851ba1e15ae8f123047445aa1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@jridgewell/remapping/-/remapping-2.3.5.tgz",
    "hash": "375c476d1972947851ba1e15ae8f123047445aa1",
    "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
    "registry": "npm",
    "packageName": "@jridgewell/remapping",
    "cacheIntegrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ== sha1-N1xHbRlylHhRuh4Vro8SMEdEWqE="
  },
  "registry": "npm",
  "hash": "375c476d1972947851ba1e15ae8f123047445aa1"
}