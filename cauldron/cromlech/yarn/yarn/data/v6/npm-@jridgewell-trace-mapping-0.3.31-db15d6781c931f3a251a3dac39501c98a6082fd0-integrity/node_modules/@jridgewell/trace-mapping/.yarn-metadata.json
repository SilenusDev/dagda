{
  "manifest": {
    "name": "@jridgewell/trace-mapping",
    "version": "0.3.31",
    "description": "Trace the original position through a source map",
    "keywords": [
      "source",
      "map"
    ],
    "main": "dist/trace-mapping.umd.js",
    "module": "dist/trace-mapping.mjs",
    "types": "types/trace-mapping.d.cts",
    "files": [
      "dist",
      "src",
      "types"
    ],
    "exports": {
      ".": [
        {
          "import": {
            "types": "./types/trace-mapping.d.mts",
            "default": "./dist/trace-mapping.mjs"
          },
          "default": {
            "types": "./types/trace-mapping.d.cts",
            "default": "./dist/trace-mapping.umd.js"
          }
        },
        "./dist/trace-mapping.umd.js"
      ],
      "./package.json": "./package.json"
    },
    "scripts": {
      "benchmark": "run-s build:code benchmark:*",
      "benchmark:install": "cd benchmark && npm install",
      "benchmark:only": "node --expose-gc benchmark/index.mjs",
      "build": "run-s -n build:code build:types",
      "build:code": "node ../../esbuild.mjs trace-mapping.ts",
      "build:types": "run-s build:types:force build:types:emit build:types:mts",
      "build:types:force": "rimraf tsconfig.build.tsbuildinfo",
      "build:types:emit": "tsc --project tsconfig.build.json",
      "build:types:mts": "node ../../mts-types.mjs",
      "clean": "run-s -n clean:code clean:types",
      "clean:code": "tsc --build --clean tsconfig.build.json",
      "clean:types": "rimraf dist types",
      "test": "run-s -n test:types test:only test:format",
      "test:format": "prettier --check '{src,test}/**/*.ts'",
      "test:only": "mocha",
      "test:types": "eslint '{src,test}/**/*.ts'",
      "lint": "run-s -n lint:types lint:format",
      "lint:format": "npm run test:format -- --write",
      "lint:types": "npm run test:types -- --fix",
      "prepublishOnly": "npm run-s -n build test"
    },
    "homepage": "https://github.com/jridgewell/sourcemaps/tree/main/packages/trace-mapping",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jridgewell/sourcemaps.git",
      "directory": "packages/trace-mapping"
    },
    "author": {
      "name": "Justin Ridgewell",
      "email": "justin@ridgewell.name"
    },
    "license": "MIT",
    "dependencies": {
      "@jridgewell/resolve-uri": "^3.1.0",
      "@jridgewell/sourcemap-codec": "^1.4.14"
    },
    "_registry": "npm",
    "_loc": "/yarn-cache/v6/npm-@jridgewell-trace-mapping-0.3.31-db15d6781c931f3a251a3dac39501c98a6082fd0-integrity/node_modules/@jridgewell/trace-mapping/package.json",
    "readmeFilename": "README.md",
    "readme": "# @jridgewell/trace-mapping\n\n> Trace the original position through a source map\n\n`trace-mapping` allows you to take the line and column of an output file and trace it to the\noriginal location in the source file through a source map.\n\nYou may already be familiar with the [`source-map`][source-map] package's `SourceMapConsumer`. This\nprovides the same `originalPositionFor` and `generatedPositionFor` API, without requiring WASM.\n\n## Installation\n\n```sh\nnpm install @jridgewell/trace-mapping\n```\n\n## Usage\n\n```typescript\nimport {\n  TraceMap,\n  originalPositionFor,\n  generatedPositionFor,\n  sourceContentFor,\n  isIgnored,\n} from '@jridgewell/trace-mapping';\n\nconst tracer = new TraceMap({\n  version: 3,\n  sources: ['input.js'],\n  sourcesContent: ['content of input.js'],\n  names: ['foo'],\n  mappings: 'KAyCIA',\n  ignoreList: [],\n});\n\n// Lines start at line 1, columns at column 0.\nconst traced = originalPositionFor(tracer, { line: 1, column: 5 });\nassert.deepEqual(traced, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n  name: 'foo',\n});\n\nconst content = sourceContentFor(tracer, traced.source);\nassert.strictEqual(content, 'content for input.js');\n\nconst generated = generatedPositionFor(tracer, {\n  source: 'input.js',\n  line: 42,\n  column: 4,\n});\nassert.deepEqual(generated, {\n  line: 1,\n  column: 5,\n});\n\nconst ignored = isIgnored(tracer, 'input.js');\nassert.equal(ignored, false);\n```\n\nWe also provide a lower level API to get the actual segment that matches our line and column. Unlike\n`originalPositionFor`, `traceSegment` uses a 0-base for `line`:\n\n```typescript\nimport { traceSegment } from '@jridgewell/trace-mapping';\n\n// line is 0-base.\nconst traced = traceSegment(tracer, /* line */ 0, /* column */ 5);\n\n// Segments are [outputColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n// Again, line is 0-base and so is sourceLine\nassert.deepEqual(traced, [5, 0, 41, 4, 0]);\n```\n\n### SectionedSourceMaps\n\nThe sourcemap spec defines a special `sections` field that's designed to handle concatenation of\noutput code with associated sourcemaps. This type of sourcemap is rarely used (no major build tool\nproduces it), but if you are hand coding a concatenation you may need it. We provide an `AnyMap`\nhelper that can receive either a regular sourcemap or a `SectionedSourceMap` and returns a\n`TraceMap` instance:\n\n```typescript\nimport { AnyMap } from '@jridgewell/trace-mapping';\nconst fooOutput = 'foo';\nconst barOutput = 'bar';\nconst output = [fooOutput, barOutput].join('\\n');\n\nconst sectioned = new AnyMap({\n  version: 3,\n  sections: [\n    {\n      // 0-base line and column\n      offset: { line: 0, column: 0 },\n      // fooOutput's sourcemap\n      map: {\n        version: 3,\n        sources: ['foo.js'],\n        names: ['foo'],\n        mappings: 'AAAAA',\n      },\n    },\n    {\n      // barOutput's sourcemap will not affect the first line, only the second\n      offset: { line: 1, column: 0 },\n      map: {\n        version: 3,\n        sources: ['bar.js'],\n        names: ['bar'],\n        mappings: 'AAAAA',\n      },\n    },\n  ],\n});\n\nconst traced = originalPositionFor(sectioned, {\n  line: 2,\n  column: 0,\n});\n\nassert.deepEqual(traced, {\n  source: 'bar.js',\n  line: 1,\n  column: 0,\n  name: 'bar',\n});\n```\n\n## Benchmarks\n\n```\nnode v20.10.0\n\namp.js.map - 45120 segments\n\nMemory Usage:\ntrace-mapping decoded         414164 bytes\ntrace-mapping encoded        6274352 bytes\nsource-map-js               10968904 bytes\nsource-map-0.6.1            17587160 bytes\nsource-map-0.8.0             8812155 bytes\nChrome dev tools             8672912 bytes\nSmallest memory usage is trace-mapping decoded\n\nInit speed:\ntrace-mapping:    decoded JSON input x 205 ops/sec ±0.19% (88 runs sampled)\ntrace-mapping:    encoded JSON input x 405 ops/sec ±1.47% (88 runs sampled)\ntrace-mapping:    decoded Object input x 4,645 ops/sec ±0.15% (98 runs sampled)\ntrace-mapping:    encoded Object input x 458 ops/sec ±1.63% (91 runs sampled)\nsource-map-js:    encoded Object input x 75.48 ops/sec ±1.64% (67 runs sampled)\nsource-map-0.6.1: encoded Object input x 39.37 ops/sec ±1.44% (53 runs sampled)\nChrome dev tools: encoded Object input x 150 ops/sec ±1.76% (79 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\nTrace speed (random):\ntrace-mapping:    decoded originalPositionFor x 44,946 ops/sec ±0.16% (99 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 37,995 ops/sec ±1.81% (89 runs sampled)\nsource-map-js:    encoded originalPositionFor x 9,230 ops/sec ±1.36% (93 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 8,057 ops/sec ±0.84% (96 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 28,198 ops/sec ±1.12% (91 runs sampled)\nChrome dev tools: encoded originalPositionFor x 46,276 ops/sec ±1.35% (95 runs sampled)\nFastest is Chrome dev tools: encoded originalPositionFor\n\nTrace speed (ascending):\ntrace-mapping:    decoded originalPositionFor x 204,406 ops/sec ±0.19% (97 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 196,695 ops/sec ±0.24% (99 runs sampled)\nsource-map-js:    encoded originalPositionFor x 11,948 ops/sec ±0.94% (99 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 10,730 ops/sec ±0.36% (100 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 51,427 ops/sec ±0.21% (98 runs sampled)\nChrome dev tools: encoded originalPositionFor x 162,615 ops/sec ±0.18% (98 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n\n***\n\n\nbabel.min.js.map - 347793 segments\n\nMemory Usage:\ntrace-mapping decoded          18504 bytes\ntrace-mapping encoded       35428008 bytes\nsource-map-js               51676808 bytes\nsource-map-0.6.1            63367136 bytes\nsource-map-0.8.0            43158400 bytes\nChrome dev tools            50721552 bytes\nSmallest memory usage is trace-mapping decoded\n\nInit speed:\ntrace-mapping:    decoded JSON input x 17.82 ops/sec ±6.35% (35 runs sampled)\ntrace-mapping:    encoded JSON input x 31.57 ops/sec ±7.50% (43 runs sampled)\ntrace-mapping:    decoded Object input x 867 ops/sec ±0.74% (94 runs sampled)\ntrace-mapping:    encoded Object input x 33.83 ops/sec ±7.66% (46 runs sampled)\nsource-map-js:    encoded Object input x 6.58 ops/sec ±3.31% (20 runs sampled)\nsource-map-0.6.1: encoded Object input x 4.23 ops/sec ±3.43% (15 runs sampled)\nChrome dev tools: encoded Object input x 22.14 ops/sec ±3.79% (41 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\nTrace speed (random):\ntrace-mapping:    decoded originalPositionFor x 78,234 ops/sec ±1.48% (29 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 60,761 ops/sec ±1.35% (21 runs sampled)\nsource-map-js:    encoded originalPositionFor x 51,448 ops/sec ±2.17% (89 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 47,221 ops/sec ±1.99% (15 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 84,002 ops/sec ±1.45% (27 runs sampled)\nChrome dev tools: encoded originalPositionFor x 106,457 ops/sec ±1.38% (37 runs sampled)\nFastest is Chrome dev tools: encoded originalPositionFor\n\nTrace speed (ascending):\ntrace-mapping:    decoded originalPositionFor x 930,943 ops/sec ±0.25% (99 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 843,545 ops/sec ±0.34% (97 runs sampled)\nsource-map-js:    encoded originalPositionFor x 114,510 ops/sec ±1.37% (36 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 87,412 ops/sec ±0.72% (92 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 197,709 ops/sec ±0.89% (59 runs sampled)\nChrome dev tools: encoded originalPositionFor x 688,983 ops/sec ±0.33% (98 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n\n***\n\n\npreact.js.map - 1992 segments\n\nMemory Usage:\ntrace-mapping decoded          33136 bytes\ntrace-mapping encoded         254240 bytes\nsource-map-js                 837488 bytes\nsource-map-0.6.1              961928 bytes\nsource-map-0.8.0               54384 bytes\nChrome dev tools              709680 bytes\nSmallest memory usage is trace-mapping decoded\n\nInit speed:\ntrace-mapping:    decoded JSON input x 3,709 ops/sec ±0.13% (99 runs sampled)\ntrace-mapping:    encoded JSON input x 6,447 ops/sec ±0.22% (101 runs sampled)\ntrace-mapping:    decoded Object input x 83,062 ops/sec ±0.23% (100 runs sampled)\ntrace-mapping:    encoded Object input x 14,980 ops/sec ±0.28% (100 runs sampled)\nsource-map-js:    encoded Object input x 2,544 ops/sec ±0.16% (99 runs sampled)\nsource-map-0.6.1: encoded Object input x 1,221 ops/sec ±0.37% (97 runs sampled)\nChrome dev tools: encoded Object input x 4,241 ops/sec ±0.39% (93 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\nTrace speed (random):\ntrace-mapping:    decoded originalPositionFor x 91,028 ops/sec ±0.14% (94 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 84,348 ops/sec ±0.26% (98 runs sampled)\nsource-map-js:    encoded originalPositionFor x 26,998 ops/sec ±0.23% (98 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 18,049 ops/sec ±0.26% (100 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 41,916 ops/sec ±0.28% (98 runs sampled)\nChrome dev tools: encoded originalPositionFor x 88,616 ops/sec ±0.14% (98 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\nTrace speed (ascending):\ntrace-mapping:    decoded originalPositionFor x 319,960 ops/sec ±0.16% (100 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 302,153 ops/sec ±0.18% (100 runs sampled)\nsource-map-js:    encoded originalPositionFor x 35,574 ops/sec ±0.19% (100 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 19,943 ops/sec ±0.12% (101 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 54,648 ops/sec ±0.20% (99 runs sampled)\nChrome dev tools: encoded originalPositionFor x 278,319 ops/sec ±0.17% (102 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n\n***\n\n\nreact.js.map - 5726 segments\n\nMemory Usage:\ntrace-mapping decoded          10872 bytes\ntrace-mapping encoded         681512 bytes\nsource-map-js                2563944 bytes\nsource-map-0.6.1             2150864 bytes\nsource-map-0.8.0               88680 bytes\nChrome dev tools             1149576 bytes\nSmallest memory usage is trace-mapping decoded\n\nInit speed:\ntrace-mapping:    decoded JSON input x 1,887 ops/sec ±0.28% (99 runs sampled)\ntrace-mapping:    encoded JSON input x 4,749 ops/sec ±0.48% (97 runs sampled)\ntrace-mapping:    decoded Object input x 74,236 ops/sec ±0.11% (99 runs sampled)\ntrace-mapping:    encoded Object input x 5,752 ops/sec ±0.38% (100 runs sampled)\nsource-map-js:    encoded Object input x 806 ops/sec ±0.19% (97 runs sampled)\nsource-map-0.6.1: encoded Object input x 418 ops/sec ±0.33% (94 runs sampled)\nChrome dev tools: encoded Object input x 1,524 ops/sec ±0.57% (92 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\nTrace speed (random):\ntrace-mapping:    decoded originalPositionFor x 620,201 ops/sec ±0.33% (96 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 579,548 ops/sec ±0.35% (97 runs sampled)\nsource-map-js:    encoded originalPositionFor x 230,983 ops/sec ±0.62% (54 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 158,145 ops/sec ±0.80% (46 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 343,801 ops/sec ±0.55% (96 runs sampled)\nChrome dev tools: encoded originalPositionFor x 659,649 ops/sec ±0.49% (98 runs sampled)\nFastest is Chrome dev tools: encoded originalPositionFor\n\nTrace speed (ascending):\ntrace-mapping:    decoded originalPositionFor x 2,368,079 ops/sec ±0.32% (98 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 2,134,039 ops/sec ±2.72% (87 runs sampled)\nsource-map-js:    encoded originalPositionFor x 290,120 ops/sec ±2.49% (82 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 187,613 ops/sec ±0.86% (49 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 479,569 ops/sec ±0.65% (96 runs sampled)\nChrome dev tools: encoded originalPositionFor x 2,048,414 ops/sec ±0.24% (98 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\n\n***\n\n\nvscode.map - 2141001 segments\n\nMemory Usage:\ntrace-mapping decoded        5206584 bytes\ntrace-mapping encoded      208370336 bytes\nsource-map-js              278493008 bytes\nsource-map-0.6.1           391564048 bytes\nsource-map-0.8.0           257508787 bytes\nChrome dev tools           291053000 bytes\nSmallest memory usage is trace-mapping decoded\n\nInit speed:\ntrace-mapping:    decoded JSON input x 1.63 ops/sec ±33.88% (9 runs sampled)\ntrace-mapping:    encoded JSON input x 3.29 ops/sec ±36.13% (13 runs sampled)\ntrace-mapping:    decoded Object input x 103 ops/sec ±0.93% (77 runs sampled)\ntrace-mapping:    encoded Object input x 5.42 ops/sec ±28.54% (19 runs sampled)\nsource-map-js:    encoded Object input x 1.07 ops/sec ±13.84% (7 runs sampled)\nsource-map-0.6.1: encoded Object input x 0.60 ops/sec ±2.43% (6 runs sampled)\nChrome dev tools: encoded Object input x 2.61 ops/sec ±22.00% (11 runs sampled)\nFastest is trace-mapping:    decoded Object input\n\nTrace speed (random):\ntrace-mapping:    decoded originalPositionFor x 257,019 ops/sec ±0.97% (93 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 179,163 ops/sec ±0.83% (92 runs sampled)\nsource-map-js:    encoded originalPositionFor x 73,337 ops/sec ±1.35% (87 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 38,797 ops/sec ±1.66% (88 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 107,758 ops/sec ±1.94% (45 runs sampled)\nChrome dev tools: encoded originalPositionFor x 188,550 ops/sec ±1.85% (79 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n\nTrace speed (ascending):\ntrace-mapping:    decoded originalPositionFor x 447,621 ops/sec ±3.64% (94 runs sampled)\ntrace-mapping:    encoded originalPositionFor x 323,698 ops/sec ±5.20% (88 runs sampled)\nsource-map-js:    encoded originalPositionFor x 78,387 ops/sec ±1.69% (89 runs sampled)\nsource-map-0.6.1: encoded originalPositionFor x 41,016 ops/sec ±3.01% (25 runs sampled)\nsource-map-0.8.0: encoded originalPositionFor x 124,204 ops/sec ±0.90% (92 runs sampled)\nChrome dev tools: encoded originalPositionFor x 230,087 ops/sec ±2.61% (93 runs sampled)\nFastest is trace-mapping:    decoded originalPositionFor\n```\n\n[source-map]: https://www.npmjs.com/package/source-map\n",
    "licenseText": "Copyright 2024 Justin Ridgewell <justin@ridgewell.name>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz#db15d6781c931f3a251a3dac39501c98a6082fd0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
    "hash": "db15d6781c931f3a251a3dac39501c98a6082fd0",
    "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
    "registry": "npm",
    "packageName": "@jridgewell/trace-mapping",
    "cacheIntegrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw== sha1-2xXWeByTHzolGj2sOVAcmKYIL9A="
  },
  "registry": "npm",
  "hash": "db15d6781c931f3a251a3dac39501c98a6082fd0"
}