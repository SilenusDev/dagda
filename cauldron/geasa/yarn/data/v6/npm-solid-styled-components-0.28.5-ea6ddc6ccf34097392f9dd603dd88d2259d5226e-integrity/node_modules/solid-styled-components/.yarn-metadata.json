{
  "manifest": {
    "name": "solid-styled-components",
    "description": "Styled Components for Solid",
    "version": "0.28.5",
    "author": {
      "name": "Ryan Carniato"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/solidjs/solid-styled-components"
    },
    "type": "module",
    "main": "src/index.js",
    "types": "src/index.d.ts",
    "files": [
      "src"
    ],
    "sideEffects": false,
    "scripts": {
      "test": "jest && npm run test:types",
      "test:types": "tsc --project tsconfig.test.json"
    },
    "dependencies": {
      "csstype": "^3.1.0",
      "goober": "^2.1.10"
    },
    "peerDependencies": {
      "solid-js": "^1.4.4"
    },
    "devDependencies": {
      "@babel/preset-typescript": "7.16.7",
      "@types/jest": "^27.4.0",
      "babel-preset-solid": "^1.4.4",
      "jest": "^27.4.7",
      "solid-jest": "^0.2.0",
      "solid-js": "^1.4.4",
      "typescript": "^4.5.4"
    },
    "jest": {
      "preset": "solid-jest/preset/browser"
    },
    "_registry": "npm",
    "_loc": "/yarn-cache/v6/npm-solid-styled-components-0.28.5-ea6ddc6ccf34097392f9dd603dd88d2259d5226e-integrity/node_modules/solid-styled-components/package.json",
    "readmeFilename": "README.md",
    "readme": "# Solid Styled Components\n\n[![NPM Version](https://img.shields.io/npm/v/solid-styled-components.svg?style=flat)](https://www.npmjs.com/package/solid-styled-components)\n![](https://img.shields.io/librariesio/release/npm/solid-styled-components)\n![](https://img.shields.io/npm/dm/solid-styled-components.svg?style=flat)\n\nThis library provides Styled Components and css helper found in popular JS in CSS libraries. This library uses [goober](https://github.com/cristianbote/goober) a 1kb style library with a wrapper to work with Solid's API. The wrapper also adds a Theming solution.\n\n## Features\n\n### `styled(tagName)`\n\n- `@param {String} tagName` The name of the dom element you'd like the styled to be applied to\n- `@returns {Function}` Returns the tag template function.\n\n```js\nimport { styled } from \"solid-styled-components\";\n\nconst Btn = styled(\"button\")`\n  border-radius: 4px;\n`;\n```\n\n#### Tagged Templates\n\n```jsx\nimport { styled } from \"solid-styled-components\";\n\nconst Btn = styled(\"button\")`\n  border-radius: ${props => props.size}px;\n`;\n\n<Btn size={20} />;\n```\n\n#### Function returns a string\n\n```jsx\nimport { styled } from \"solid-styled-components\";\n\nconst Btn = styled(\"button\")(\n  props => `\n  border-radius: ${props.size}px;\n`\n);\n\n<Btn size={20} />;\n```\n\n#### Nesting styled components\n\n```jsx\nimport { styled } from \"solid-styled-components\";\n\nconst Icon = styled(\"span\")`\n  display: flex;\n  flex: 1;\n  color: red;\n`;\n\nconst Button = styled(\"button\")`\n  background: dodgerblue;\n  color: white;\n  border: ${Math.random()}px solid white;\n\n  &:focus,\n  &:hover {\n    padding: 1em;\n  }\n\n  .otherClass {\n    margin: 0;\n  }\n\n  ${Icon.class} {\n    color: black;\n  }\n`;\n```\n\n#### Style Object\n\n```jsx\nimport { styled } from \"solid-styled-components\";\n\nconst Btn = styled(\"button\")(props => ({\n  borderRadius: props.size + \"px\"\n}));\n\n<Btn size={20} />;\n```\n\n### `css`\n\n- `@returns {String}` Returns the class.\n\nTo create a class, you need to call `css` with your style rules in a tagged template:\n\n```jsx\nimport { css } from \"solid-styled-components\";\n\nconst BtnClass = css`\n  border-radius: 4px;\n`;\n\nconst App => <button class={BtnClass}>click</button>\n```\n\nOr an object:\n\n```js\nimport { css } from \"solid-styled-components\";\n\nconst BtnClass = css({ borderRadius: \"4px\" })\n\nconst App => <button class={BtnClass}>click</button>\n```\n\n#### Passing props to `css` tagged templates\n\n```js\nimport { css } from \"solid-styled-components\";\n\n// JSX\nconst CustomButton = props => (\n  <button\n    class={css`\n      border-radius: ${props.size}px;\n    `}\n  >\n    click\n  </button>\n);\n```\n\n### `extractCss(target?)`\n\n- `@returns {String}`\n\nReturns the `<style>` tag that is rendered in a target and clears the style sheet. Defaults to `<head>`. Used to grab the styles for SSR.\n\n```js\nconst { extractCss } = require(\"goober\");\n\n// After your app has rendered, just call it:\nconst styleTag = `<style id=\"_goober\">${extractCss()}</style>`;\n\n// Note: To be able to `hydrate` the styles you should use the proper `id` so `goober` can pick it up and use it as the target from now on\n```\n\n### `keyframes`\n\n- `@returns {String}`\n\nAdd keyframe animations to a style component.\n\n```js\nconst rotate = keyframes`\n  100% { \n    transform:rotate(360deg); \n  }\n`\n\nconst LoadingIcon = styled.img`\n  animation: ${ rotate } 1s linear infinite;\n`\n```\n\n### `createGlobalStyles`\n\nFor a global style component, you call `createGlobalStyles` with your global tagged template.\n\n```js\nimport { createGlobalStyles } from \"solid-styled-components\";\n\nconst GlobalStyles = () => {\n  const Styles = createGlobalStyles`\n    html,\n    body {\n      background: light;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n  `;\n  return <Styles />;\n};\n```\n\n### `Theme`\n\nYou can set a Theme Provider (remember to use state or signals if you want it to be reactive).\n\n```jsx\nimport { styled, ThemeProvider } from \"solid-styled-components\";\n\nconst theme = {\n  colors: {\n    primary: \"hotpink\"\n  }\n};\n\nconst SomeText = styled(\"div\")`\n  color: ${props => props.theme.colors.primary};\n`;\n\nrender(\n  () => (\n    <ThemeProvider theme={theme}>\n      <SomeText>some text</SomeText>\n    </ThemeProvider>\n  ),\n  document.getElementById(\"app\")\n);\n```\n\nThe library provides a `useTheme` hook if you wish to use it elsewhere like in you `css` functions.\n\n### Custom prefixer\n\nUse `setup` to set up a custom prefixer.\n\n```ts\nsetup(\n  prefixer: null | ((key: string, value: any) => string)\n  shouldForwardProp?: null | ((props: string[]) => string[])\n)\n```\n\n### `shouldForwardProp`\n\nTo prevent unwanted props attaching to the generated HTML, you can use the `shouldForwardProp` helper:\n\n```ts\nimport { shouldForwardProp } from \"solid-styled-components\";\n\nsetup(null, shouldForwardProp(prop => {\n  return prop !== \"foo\";\n}));\n```\n\nThis will prevent the `foo` prop from appearing as an HTML attribute.\n\nNote: Be careful not to filter out props such as `children` or `onClick` this way; these are already handled internally.\n\n## Using ThemeProvider in TypeScript\n\nBefore you can effectively start to use the ThemeProvider in TypeScript you will have to do a little bit of configuration.\n\n### Create a declarations file\n\nTypeScript definitions for solid-styled-components can be extended by using [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html).\n\nThe first step is to create a declarations file. For example, let's name it `styled.d.ts`:\n\n```typescript\n// import original module declarations\nimport \"solid-styled-components\";\n\n// and extend them!\ndeclare module \"solid-styled-components\" {\n  export interface DefaultTheme {\n    colors: {\n      primary: string;\n    };\n  }\n}\n```\n\n`DefaultTheme` is being used as an interface of `props.theme` out of the box. By default the interface `DefaultTheme` is empty so that's why we need to extend it.\n\nNow we can create a theme just by using the DefaultTheme declared at the step above.\n\n```tsx\nimport { styled, ThemeProvider, DefaultTheme } from \"solid-styled-components\";\n\nconst theme: DefaultTheme = {\n  colors: {\n    primary: \"hotpink\"\n  }\n};\n\nconst SomeText = styled(\"div\")`\n  color: ${props => props.theme.colors.primary};\n`;\n\nrender(\n  () => (\n    <ThemeProvider theme={theme}>\n      <SomeText>some text</SomeText>\n    </ThemeProvider>\n  ),\n  document.getElementById(\"app\")\n);\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020-2021 Ryan Carniato\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/solid-styled-components/-/solid-styled-components-0.28.5.tgz#ea6ddc6ccf34097392f9dd603dd88d2259d5226e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/solid-styled-components/-/solid-styled-components-0.28.5.tgz",
    "hash": "ea6ddc6ccf34097392f9dd603dd88d2259d5226e",
    "integrity": "sha512-vwTcdp76wZNnESIzB6rRZ3U55NgcSAQXCiiRIiEFhxTFqT0bEh/warNT1qaRZu4OkAzrBkViOngF35ktI8sc4A==",
    "registry": "npm",
    "packageName": "solid-styled-components",
    "cacheIntegrity": "sha512-vwTcdp76wZNnESIzB6rRZ3U55NgcSAQXCiiRIiEFhxTFqT0bEh/warNT1qaRZu4OkAzrBkViOngF35ktI8sc4A== sha1-6m3cbM80CXOS+d1gPdiNIlnVIm4="
  },
  "registry": "npm",
  "hash": "ea6ddc6ccf34097392f9dd603dd88d2259d5226e"
}