{
  "manifest": {
    "name": "is-what",
    "version": "4.1.16",
    "description": "JS type check (TypeScript supported) functions like `isPlainObject() isArray()` etc. A simple & small integration.",
    "type": "module",
    "sideEffects": false,
    "types": "./dist/index.d.ts",
    "module": "./dist/index.js",
    "main": "./dist/index.js",
    "exports": {
      ".": {
        "require": {
          "types": "./dist/cjs/index.d.cts",
          "default": "./dist/cjs/index.cjs"
        },
        "import": {
          "types": "./dist/index.d.ts",
          "default": "./dist/index.js"
        }
      }
    },
    "files": [
      "dist"
    ],
    "engines": {
      "node": ">=12.13"
    },
    "scripts": {
      "test": "vitest run",
      "lint": "tsc --noEmit && eslint ./src --ext .ts",
      "build": "rollup -c ./rollup.config.js",
      "build:docs": "typedoc",
      "release": "npm run lint && del dist && npm run build && np"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mesqueeb/is-what.git"
    },
    "keywords": [
      "javascript",
      "typescript",
      "typechecker",
      "check-type",
      "javascript-type",
      "primitive-types",
      "plain-object",
      "plain-objects",
      "class-instance",
      "class-identifier",
      "type-checking",
      "type-checker",
      "type-check",
      "define-type",
      "get-type",
      "what-type",
      "is-object",
      "is-plain-obj",
      "is-plain-object"
    ],
    "author": {
      "name": "Luca Ban - Mesqueeb"
    },
    "funding": "https://github.com/sponsors/mesqueeb",
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mesqueeb/is-what/issues"
    },
    "homepage": "https://github.com/mesqueeb/is-what#readme",
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "^5.62.0",
      "@typescript-eslint/parser": "^5.62.0",
      "del-cli": "^5.1.0",
      "eslint-config-prettier": "^8.10.0",
      "eslint-plugin-tree-shaking": "^1.10.1",
      "eslint": "^8.52.0",
      "np": "^8.0.4",
      "prettier-plugin-jsdoc": "^0.4.2",
      "prettier": "^2.8.8",
      "rollup-plugin-dts": "^5.3.1",
      "rollup-plugin-esbuild": "^5.0.0",
      "rollup": "^3.29.4",
      "typedoc": "^0.25.2",
      "typescript": "^5.2.2",
      "vitest": "^0.34.6"
    },
    "np": {
      "branch": "production",
      "publish": false,
      "yarn": false
    },
    "eslintConfig": {
      "ignorePatterns": [
        "node_modules",
        "dist",
        "scripts",
        "test"
      ],
      "root": true,
      "parser": "@typescript-eslint/parser",
      "plugins": [
        "@typescript-eslint",
        "tree-shaking"
      ],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
      ],
      "rules": {
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/ban-ts-ignore": "off",
        "tree-shaking/no-side-effects-in-initialization": "error",
        "@typescript-eslint/ban-ts-comment": "off"
      }
    },
    "prettier": {
      "printWidth": 100,
      "tabWidth": 2,
      "singleQuote": true,
      "trailingComma": "es5",
      "semi": false,
      "bracketSpacing": true,
      "quoteProps": "consistent",
      "plugins": [
        "prettier-plugin-jsdoc"
      ]
    },
    "_registry": "npm",
    "_loc": "/yarn-cache/v6/npm-is-what-4.1.16-1ad860a19da8b4895ad5495da3182ce2acdd7a6f-integrity/node_modules/is-what/package.json",
    "readmeFilename": "README.md",
    "readme": "# is What? 🙉\n\n<a href=\"https://www.npmjs.com/package/is-what\"><img src=\"https://img.shields.io/npm/v/is-what.svg\" alt=\"Total Downloads\"></a>\n<a href=\"https://www.npmjs.com/package/is-what\"><img src=\"https://img.shields.io/npm/dw/is-what.svg\" alt=\"Latest Stable Version\"></a>\n\nVery simple & small JS type check functions. It's fully TypeScript supported!\n\n```\nnpm i is-what\n```\n\nOr for deno available at: `\"deno.land/x/is_what\"`\n\n> Also check out [is-where 🙈](https://github.com/mesqueeb/is-where)\n\n## Motivation\n\nI built is-what because the existing solutions were all too complex or too poorly built.\n\nI was looking for:\n\n- A simple way to check any kind of type (including non-primitives)\n- Be able to check if an object is a plain object `{}` or a special object (like a class instance) ‼️\n- Let TypeScript automatically know what type a value is when checking\n\nAnd that's exactly what `is-what` is! (what a great wordplay 😃)\n\n## Usage\n\nis-what is really easy to use, and most functions work just like you'd expect.\n\n```js\n// import functions you want to use like so:\nimport { isString, isDate, isPlainObject } from 'is-what'\n```\n\n1. First I'll go over the simple functions available. Only `isNumber` and `isDate` have special treatment.\n2. After that I'll talk about working with Objects (plain objects vs class instances etc.).\n3. Lastly I'll talk about TypeScript implementation\n\n### Simple type check functions\n\n```js\n// basics\nisBoolean(true) // true\nisBoolean(false) // true\nisUndefined(undefined) // true\nisNull(null) // true\n\n// strings\nisString('') // true\nisEmptyString('') // true\nisFullString('') // false\n\n// numbers\nisNumber(0) // true\nisNumber('0') // false\nisNumber(NaN) // false *\nisPositiveNumber(1) // true\nisNegativeNumber(-1) // true\n// * see below for special NaN use cases!\n\n// arrays\nisArray([]) // true\nisEmptyArray([]) // true\nisFullArray([1]) // true\n\n// objects\nisPlainObject({}) // true *\nisEmptyObject({}) // true\nisFullObject({ a: 1 }) // true\n// * see below for special object (& class instance) use cases!\n\n// functions\nisFunction(function () {}) // true\nisFunction(() => {}) // true\n\n// dates\nisDate(new Date()) // true\nisDate(new Date('invalid date')) // false\n\n// maps & sets\nisMap(new Map()) // true\nisSet(new Set()) // true\nisWeakMap(new WeakMap()) // true\nisWeakSet(new WeakSet()) // true\n\n// others\nisRegExp(/\\s/gi) // true\nisSymbol(Symbol()) // true\nisBlob(new Blob()) // true\nisFile(new File([''], '', { type: 'text/html' })) // true\nisError(new Error('')) // true\nisPromise(new Promise((resolve) => {})) // true\n\n// primitives\nisPrimitive('') // true\n// true for any of: boolean, null, undefined, number, string, symbol\n```\n\n### Let's talk about NaN\n\n`isNaN` is a built-in JS Function but it really makes no sense:\n\n```js\n// 1)\ntypeof NaN === 'number' // true\n// 🤔 (\"not a number\" is a \"number\"...)\n\n// 2)\nisNaN('1') // false\n// 🤔 the string '1' is not-\"not a number\"... so it's a number??\n\n// 3)\nisNaN('one') // true\n// 🤔 'one' is NaN but `NaN === 'one'` is false...\n```\n\nWith is-what the way we treat NaN makes a little bit more sense:\n\n```js\nimport { isNumber, isNaNValue } from 'is-what'\n\n// 1)\nisNumber(NaN) // false!\n// let's not treat NaN as a number\n\n// 2)\nisNaNValue('1') // false\n// if it's not NaN, it's not NaN!!\n\n// 3)\nisNaNValue('one') // false\n// if it's not NaN, it's not NaN!!\n\nisNaNValue(NaN) // true\n```\n\n### isPlainObject vs isAnyObject\n\nChecking for a JavaScript object can be really difficult. In JavaScript you can create classes that will behave just like JavaScript objects but might have completely different prototypes. With is-what I went for this classification:\n\n- `isPlainObject` will only return `true` on plain JavaScript objects and not on classes or others\n- `isAnyObject` will be more loose and return `true` on regular objects, classes, etc.\n\n```js\n// define a plain object\nconst plainObject = { hello: 'I am a good old object.' }\n\n// define a special object\nclass SpecialObject {\n  constructor(somethingSpecial) {\n    this.speciality = somethingSpecial\n  }\n}\nconst specialObject = new SpecialObject('I am a special object! I am a class instance!!!')\n\n// check the plain object\nisPlainObject(plainObject) // returns true\nisAnyObject(plainObject) // returns true\ngetType(plainObject) // returns 'Object'\n\n// check the special object\nisPlainObject(specialObject) // returns false !!!!!!!!!\nisAnyObject(specialObject) // returns true\ngetType(specialObject) // returns 'Object'\n```\n\n> Please note that `isPlainObject` will only return `true` for normal plain JavaScript objects.\n\n### Getting and checking for specific types\n\nYou can check for specific types with `getType` and `isType`:\n\n```js\nimport { getType, isType } from 'is-what'\n\ngetType('') // returns 'String'\n// pass a Type as second param:\nisType('', String) // returns true\n```\n\nIf you just want to make sure your object _inherits_ from a particular class or\n`toStringTag` value, you can use `isInstanceOf()` like this:\n\n```js\nimport { isInstanceOf } from 'is-what'\n\nisInstanceOf(new XMLHttpRequest(), 'EventTarget')\n// returns true\nisInstanceOf(globalThis, ReadableStream)\n// returns false\n```\n\n## TypeScript\n\nis-what makes TypeScript know the type during if statements. This means that a check returns the type of the payload for TypeScript users.\n\n```ts\nfunction isNumber(payload: any): payload is number {\n  // return boolean\n}\n// As you can see above, all functions return a boolean for JavaScript, but pass the payload type to TypeScript.\n\n// usage example:\nfunction fn(payload: string | number): number {\n  if (isNumber(payload)) {\n    // ↑ TypeScript already knows payload is a number here!\n    return payload\n  }\n  return 0\n}\n```\n\n`isPlainObject` and `isAnyObject` with TypeScript will declare the payload to be an object type with any props:\n\n```ts\nfunction isPlainObject(payload: any): payload is { [key: string]: any }\nfunction isAnyObject(payload: any): payload is { [key: string]: any }\n// The reason to return `{[key: string]: any}` is to be able to do\nif (isPlainObject(payload) && payload.id) return payload.id\n// if isPlainObject() would return `payload is object` then it would give an error at `payload.id`\n```\n\n### isObjectLike\n\nIf you want more control over what kind of interface/type is casted when checking for objects.\n\nTo cast to a specific type while checking for `isAnyObject`, can use `isObjectLike<T>`:\n\n```ts\nimport { isObjectLike } from 'is-what'\n\nconst payload = { name: 'Mesqueeb' } // current type: `{ name: string }`\n\n// Without casting:\nif (isAnyObject(payload)) {\n  // in here `payload` is casted to: `Record<string | number | symbol, any>`\n  // WE LOOSE THE TYPE!\n}\n\n// With casting:\n// you can pass a specific type for TS that will be casted when the function returns\nif (isObjectLike<{ name: string }>(payload)) {\n  // in here `payload` is casted to: `{ name: string }`\n}\n```\n\nPlease note: this library will not actually check the shape of the object, you need to do that yourself.\n\n`isObjectLike<T>` works like this under the hood:\n\n```ts\nfunction isObjectLike<T extends object>(payload: any): payload is T {\n  return isAnyObject(payload)\n}\n```\n\n## Meet the family (more tiny utils with TS support)\n\n- [is-what 🙉](https://github.com/mesqueeb/is-what)\n- [is-where 🙈](https://github.com/mesqueeb/is-where)\n- [merge-anything 🥡](https://github.com/mesqueeb/merge-anything)\n- [check-anything 👁](https://github.com/mesqueeb/check-anything)\n- [remove-anything ✂️](https://github.com/mesqueeb/remove-anything)\n- [getorset-anything 🐊](https://github.com/mesqueeb/getorset-anything)\n- [map-anything 🗺](https://github.com/mesqueeb/map-anything)\n- [filter-anything ⚔️](https://github.com/mesqueeb/filter-anything)\n- [copy-anything 🎭](https://github.com/mesqueeb/copy-anything)\n- [case-anything 🐫](https://github.com/mesqueeb/case-anything)\n- [flatten-anything 🏏](https://github.com/mesqueeb/flatten-anything)\n- [nestify-anything 🧅](https://github.com/mesqueeb/nestify-anything)\n\n## Source code\n\nIt's litterally just these functions:\n\n```js\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1)\n}\nfunction isUndefined(payload) {\n  return getType(payload) === 'Undefined'\n}\nfunction isString(payload) {\n  return getType(payload) === 'String'\n}\nfunction isAnyObject(payload) {\n  return getType(payload) === 'Object'\n}\n// etc...\n```\n\nSee the full source code [here](https://github.com/mesqueeb/is-what/blob/production/src/index.ts).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Luca Ban - Mesqueeb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/is-what/-/is-what-4.1.16.tgz#1ad860a19da8b4895ad5495da3182ce2acdd7a6f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/is-what/-/is-what-4.1.16.tgz",
    "hash": "1ad860a19da8b4895ad5495da3182ce2acdd7a6f",
    "integrity": "sha512-ZhMwEosbFJkA0YhFnNDgTM4ZxDRsS6HqTo7qsZM08fehyRYIYa0yHu5R6mgo1n/8MgaPBXiPimPD77baVFYg+A==",
    "registry": "npm",
    "packageName": "is-what",
    "cacheIntegrity": "sha512-ZhMwEosbFJkA0YhFnNDgTM4ZxDRsS6HqTo7qsZM08fehyRYIYa0yHu5R6mgo1n/8MgaPBXiPimPD77baVFYg+A== sha1-GthgoZ2otIla1Uldoxgs4qzdem8="
  },
  "registry": "npm",
  "hash": "1ad860a19da8b4895ad5495da3182ce2acdd7a6f"
}